{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar baseTransaction_1 = require(\"./baseTransaction\");\n\nvar types_1 = require(\"./types\");\n\nvar util_1 = require(\"./util\");\n\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\r\n * Typed transaction with optional access lists\r\n *\r\n * - TransactionType: 1\r\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\r\n */\n\nvar AccessListEIP2930Transaction = function (_super) {\n  __extends(AccessListEIP2930Transaction, _super);\n  /**\r\n   * This constructor takes the values, validates them, assigns them and freezes the object.\r\n   *\r\n   * It is not recommended to use this constructor directly. Instead use\r\n   * the static factory methods to assist in creating a Transaction object from\r\n   * varying data types.\r\n   */\n\n\n  function AccessListEIP2930Transaction(txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a, _b;\n\n    var _this = _super.call(this, __assign(__assign({}, txData), {\n      type: TRANSACTION_TYPE\n    })) || this;\n    /**\r\n     * The default HF if the tx type is active on that HF\r\n     * or the first greater HF where the tx is active.\r\n     *\r\n     * @hidden\r\n     */\n\n\n    _this.DEFAULT_HARDFORK = 'berlin';\n    var chainId = txData.chainId,\n        accessList = txData.accessList,\n        gasPrice = txData.gasPrice;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainIdBN(); // EIP-2718 check is done in Common\n\n    if (!_this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n\n    _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]); // Populate the access list fields\n\n    var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON; // Verify the access list format.\n\n    util_1.AccessLists.verifyAccessList(_this.accessList);\n    _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice === '' ? '0x' : gasPrice));\n\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n\n    if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\n      throw new Error('The y-parity of the transaction should either be 0 or 1');\n    }\n\n    if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n\n    if (freeze) {\n      Object.freeze(_this);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\n    /**\r\n     * EIP-2930 alias for `r`\r\n     *\r\n     * @deprecated use `r` instead\r\n     */\n    get: function get() {\n      return this.r;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\n    /**\r\n     * EIP-2930 alias for `s`\r\n     *\r\n     * @deprecated use `s` instead\r\n     */\n    get: function get() {\n      return this.s;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\n    /**\r\n     * EIP-2930 alias for `v`\r\n     *\r\n     * @deprecated use `v` instead\r\n     */\n    get: function get() {\n      return this.v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Instantiate a transaction from a data dictionary.\r\n   *\r\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * v, r, s }\r\n   *\r\n   * Notes:\r\n   * - `chainId` will be set automatically if not provided\r\n   * - All parameters are optional and have some basic default values\r\n   */\n\n  AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return new AccessListEIP2930Transaction(txData, opts);\n  };\n  /**\r\n   * Instantiate a transaction from the serialized tx.\r\n   *\r\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\r\n   */\n\n\n  AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \" + TRANSACTION_TYPE + \", received: \" + serialized.slice(0, 1).toString('hex'));\n    }\n\n    var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  };\n  /**\r\n   * Instantiate a transaction from the serialized tx.\r\n   * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\r\n   *\r\n   * Note: This means that the Buffer should start with 0x01.\r\n   *\r\n   * @deprecated this constructor alias is deprecated and will be removed\r\n   * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\r\n   */\n\n\n  AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\n  };\n  /**\r\n   * Create a transaction from a values array.\r\n   *\r\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\r\n   */\n\n\n  AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n\n    var _a = __read(values, 11),\n        chainId = _a[0],\n        nonce = _a[1],\n        gasPrice = _a[2],\n        gasLimit = _a[3],\n        to = _a[4],\n        value = _a[5],\n        data = _a[6],\n        accessList = _a[7],\n        v = _a[8],\n        r = _a[9],\n        s = _a[10];\n\n    var emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: new ethereumjs_util_1.BN(chainId),\n      nonce: nonce,\n      gasPrice: gasPrice,\n      gasLimit: gasLimit,\n      to: to,\n      value: value,\n      data: data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n      v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\n      r: r,\n      s: s\n    }, opts);\n  };\n  /**\r\n   * The amount of gas paid for the data in this tx\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getDataFee = function () {\n    var cost = _super.prototype.getDataFee.call(this);\n\n    cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n    return cost;\n  };\n  /**\r\n   * The up front amount that an account must have for this transaction to be valid\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\n    return this.gasLimit.mul(this.gasPrice).add(this.value);\n  };\n  /**\r\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\r\n   *\r\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\r\n   *\r\n   * Use {@link AccessListEIP2930Transaction.serialize} to add to block data for {@link Block.fromValuesArray}.\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.raw = function () {\n    return [ethereumjs_util_1.bnToUnpaddedBuffer(this.chainId), ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice), ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit), this.to !== undefined ? this.to.buf : Buffer.from([]), ethereumjs_util_1.bnToUnpaddedBuffer(this.value), this.data, this.accessList, this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]), this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]), this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([])];\n  };\n  /**\r\n   * Returns the serialized encoding of the EIP-2930 transaction.\r\n   *\r\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\r\n   *\r\n   * Note that in contrast to the legacy tx serialization format this is not\r\n   * valid RLP any more due to the raw tx type preceeding and concatenated to\r\n   * the RLP encoding of the values.\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.serialize = function () {\n    var base = this.raw();\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n  };\n  /**\r\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\r\n   * to sign the transaction (e.g. for sending to a hardware wallet).\r\n   *\r\n   * Note: in contrast to the legacy tx the raw message format is already\r\n   * serialized and doesn't need to be RLP encoded any more.\r\n   *\r\n   * ```javascript\r\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\r\n   * ```\r\n   *\r\n   * @param hashMessage - Return hashed message if set to true (default: true)\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\n    if (hashMessage === void 0) {\n      hashMessage = true;\n    }\n\n    var base = this.raw().slice(0, 8);\n    var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\n\n    if (hashMessage) {\n      return ethereumjs_util_1.keccak256(message);\n    } else {\n      return message;\n    }\n  };\n  /**\r\n   * Computes a sha3-256 hash of the serialized tx.\r\n   *\r\n   * This method can only be used for signed txs (it throws otherwise).\r\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.hash = function () {\n    if (!this.isSigned()) {\n      throw new Error('Cannot call hash method if transaction is not signed');\n    }\n\n    return ethereumjs_util_1.keccak256(this.serialize());\n  };\n  /**\r\n   * Computes a sha3-256 hash which can be used to verify the signature\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\n    return this.getMessageToSign();\n  };\n  /**\r\n   * Returns the public key of the sender\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\n    var _a;\n\n    if (!this.isSigned()) {\n      throw new Error('Cannot call this method if transaction is not signed');\n    }\n\n    var msgHash = this.getMessageToVerifySignature(); // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n\n    if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\n      throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n    }\n\n    var _b = this,\n        yParity = _b.yParity,\n        r = _b.r,\n        s = _b.s;\n\n    try {\n      return ethereumjs_util_1.ecrecover(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign\n      ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s));\n    } catch (e) {\n      throw new Error('Invalid Signature');\n    }\n  };\n\n  AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\n    var opts = {\n      common: this.common\n    };\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: new ethereumjs_util_1.BN(v - 27),\n      r: new ethereumjs_util_1.BN(r),\n      s: new ethereumjs_util_1.BN(s)\n    }, opts);\n  };\n  /**\r\n   * Returns an object with the JSON representation of the transaction\r\n   */\n\n\n  AccessListEIP2930Transaction.prototype.toJSON = function () {\n    var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\n    return {\n      chainId: ethereumjs_util_1.bnToHex(this.chainId),\n      nonce: ethereumjs_util_1.bnToHex(this.nonce),\n      gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n      gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: ethereumjs_util_1.bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined\n    };\n  };\n\n  return AccessListEIP2930Transaction;\n}(baseTransaction_1.BaseTransaction);\n\nexports.default = AccessListEIP2930Transaction;","map":{"version":3,"sources":["../src/eip2930Transaction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAUA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAUA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAM,gBAAgB,GAAG,CAAzB;AACA,IAAM,uBAAuB,GAAG,MAAM,CAAC,IAAP,CAAY,gBAAgB,CAAC,QAAjB,CAA0B,EAA1B,EAA8B,QAA9B,CAAuC,CAAvC,EAA0C,GAA1C,CAAZ,EAA4D,KAA5D,CAAhC;AAEA;;;;;AAKG;;AACH,IAAA,4BAAA,GAAA,UAAA,MAAA,EAAA;AAA0D,EAAA,SAAA,CAAA,4BAAA,EAAA,MAAA,CAAA;AAiIxD;;;;;;AAMG;;;AACH,WAAA,4BAAA,CAAmB,MAAnB,EAAoD,IAApD,EAAwE;AAApB,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA;AAAoB;;;;AAAxE,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAW,MAAX,CAAA,EAAiB;AAAE,MAAA,IAAI,EAAE;AAAR,KAAjB,CAAA,KAA4C,IAD9C;AAhIA;;;;;AAKG;;;AACO,IAAA,KAAA,CAAA,gBAAA,GAAmB,QAAnB;AA4HA,QAAA,OAAO,GAA2B,MAAM,CAAjC,OAAP;AAAA,QAAS,UAAU,GAAe,MAAM,CAArB,UAAnB;AAAA,QAAqB,QAAQ,GAAK,MAAM,CAAX,QAA7B;AAER,IAAA,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,UAAL,CAAgB,IAAI,CAAC,MAArB,EAA6B,OAA7B,CAAd;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,KAAI,CAAC,MAAL,CAAY,SAAZ,EAAf,CALsE,CAOtE;;AACA,QAAI,CAAC,KAAI,CAAC,MAAL,CAAY,cAAZ,CAA2B,IAA3B,CAAL,EAAuC;AACrC,YAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,IAAA,KAAI,CAAC,kBAAL,GAA0B,KAAI,CAAC,kBAAL,CAAwB,MAAxB,CAA+B,CAAC,IAAD,EAAO,IAAP,CAA/B,CAA1B,CAXsE,CAatE;;AACA,QAAM,cAAc,GAAG,MAAA,CAAA,WAAA,CAAY,iBAAZ,CAA8B,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAA,UAAA,GAAc,EAA5C,CAAvB;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,cAAc,CAAC,UAAjC;AACA,IAAA,KAAI,CAAC,cAAL,GAAsB,cAAc,CAAC,cAArC,CAhBsE,CAiBtE;;AACA,IAAA,MAAA,CAAA,WAAA,CAAY,gBAAZ,CAA6B,KAAI,CAAC,UAAlC;AAEA,IAAA,KAAI,CAAC,QAAL,GAAgB,IAAI,iBAAA,CAAA,EAAJ,CAAO,iBAAA,CAAA,QAAA,CAAS,QAAQ,KAAK,EAAb,GAAkB,IAAlB,GAAyB,QAAlC,CAAP,CAAhB;;AAEA,IAAA,KAAI,CAAC,+BAAL,CAAqC;AAAE,MAAA,QAAQ,EAAE,KAAI,CAAC;AAAjB,KAArC;;AAEA,QAAI,KAAI,CAAC,CAAL,IAAU,CAAC,KAAI,CAAC,CAAL,CAAO,GAAP,CAAW,CAAX,CAAX,IAA4B,CAAC,KAAI,CAAC,CAAL,CAAO,GAAP,CAAW,CAAX,CAAjC,EAAgD;AAC9C,YAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,QAAI,KAAI,CAAC,MAAL,CAAY,WAAZ,CAAwB,WAAxB,MAAoC,CAAA,EAAA,GAAI,KAAI,CAAC,CAAT,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,EAAF,CAAK,OAAA,CAAA,OAAL,CAA9C,CAAJ,EAAiE;AAC/D,YAAM,IAAI,KAAJ,CACJ,8EADI,CAAN;AAGD;;AAED,QAAM,MAAM,GAAA,CAAA,EAAA,GAAG,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,MAAT,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,EAAf,GAAmB,IAA/B;;AACA,QAAI,MAAJ,EAAY;AACV,MAAA,MAAM,CAAC,MAAP,CAAc,KAAd;AACD;;;AACF;;AAzJD,EAAA,MAAA,CAAA,cAAA,CAAI,4BAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AALX;;;;AAIG;SACH,eAAA;AACE,aAAO,KAAK,CAAZ;AACD,KAFU;qBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,4BAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AALX;;;;AAIG;SACH,eAAA;AACE,aAAO,KAAK,CAAZ;AACD,KAFU;qBAAA;;AAAA,GAAX;AASA,EAAA,MAAA,CAAA,cAAA,CAAI,4BAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;AALX;;;;AAIG;SACH,eAAA;AACE,aAAO,KAAK,CAAZ;AACD,KAFU;qBAAA;;AAAA,GAAX;AAIA;;;;;;;;;AASG;;AACW,EAAA,4BAAA,CAAA,UAAA,GAAd,UAAyB,MAAzB,EAA0D,IAA1D,EAA8E;AAApB,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA;AAAoB;;AAC5E,WAAO,IAAI,4BAAJ,CAAiC,MAAjC,EAAyC,IAAzC,CAAP;AACD,GAFa;AAId;;;;;AAKG;;;AACW,EAAA,4BAAA,CAAA,gBAAA,GAAd,UAA+B,UAA/B,EAAmD,IAAnD,EAAuE;AAApB,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA;AAAoB;;AACrE,QAAI,CAAC,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,MAAvB,CAA8B,uBAA9B,CAAL,EAA6D;AAC3D,YAAM,IAAI,KAAJ,CACJ,wFAAsF,gBAAtF,GAAsG,cAAtG,GAAqH,UAAU,CAC5H,KADkH,CAC5G,CAD4G,EACzG,CADyG,EAElH,QAFkH,CAEzG,KAFyG,CADjH,CAAN;AAKD;;AAED,QAAM,MAAM,GAAG,iBAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,UAAU,CAAC,KAAX,CAAiB,CAAjB,CAAX,CAAf;;AAEA,QAAI,CAAC,KAAK,CAAC,OAAN,CAAc,MAAd,CAAL,EAA4B;AAC1B,YAAM,IAAI,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,WAAO,4BAA4B,CAAC,eAA7B,CAA6C,MAA7C,EAA4D,IAA5D,CAAP;AACD,GAhBa;AAkBd;;;;;;;;AAQG;;;AACW,EAAA,4BAAA,CAAA,mBAAA,GAAd,UAAkC,UAAlC,EAAsD,IAAtD,EAA0E;AAApB,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA;AAAoB;;AACxE,WAAO,4BAA4B,CAAC,gBAA7B,CAA8C,UAA9C,EAA0D,IAA1D,CAAP;AACD,GAFa;AAId;;;;;AAKG;;;AACW,EAAA,4BAAA,CAAA,eAAA,GAAd,UAA8B,MAA9B,EAAoE,IAApE,EAAwF;AAApB,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA;AAAoB;;AACtF,QAAI,MAAM,CAAC,MAAP,KAAkB,CAAlB,IAAuB,MAAM,CAAC,MAAP,KAAkB,EAA7C,EAAiD;AAC/C,YAAM,IAAI,KAAJ,CACJ,uGADI,CAAN;AAGD;;AAEK,QAAA,EAAA,GAAA,MAAA,CAA6E,MAA7E,EAAmF,EAAnF,CAAA;AAAA,QAAC,OAAO,GAAA,EAAA,CAAA,CAAA,CAAR;AAAA,QAAU,KAAK,GAAA,EAAA,CAAA,CAAA,CAAf;AAAA,QAAiB,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAzB;AAAA,QAA2B,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAnC;AAAA,QAAqC,EAAE,GAAA,EAAA,CAAA,CAAA,CAAvC;AAAA,QAAyC,KAAK,GAAA,EAAA,CAAA,CAAA,CAA9C;AAAA,QAAgD,IAAI,GAAA,EAAA,CAAA,CAAA,CAApD;AAAA,QAAsD,UAAU,GAAA,EAAA,CAAA,CAAA,CAAhE;AAAA,QAAkE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAnE;AAAA,QAAqE,CAAC,GAAA,EAAA,CAAA,CAAA,CAAtE;AAAA,QAAwE,CAAC,GAAA,EAAA,CAAA,EAAA,CAAzE;;AAEN,QAAM,eAAe,GAAe,EAApC;AAEA,WAAO,IAAI,4BAAJ,CACL;AACE,MAAA,OAAO,EAAE,IAAI,iBAAA,CAAA,EAAJ,CAAO,OAAP,CADX;AAEE,MAAA,KAAK,EAAA,KAFP;AAGE,MAAA,QAAQ,EAAA,QAHV;AAIE,MAAA,QAAQ,EAAA,QAJV;AAKE,MAAA,EAAE,EAAA,EALJ;AAME,MAAA,KAAK,EAAA,KANP;AAOE,MAAA,IAAI,EAAA,IAPN;AAQE,MAAA,UAAU,EAAE,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAA,UAAA,GAAc,eAR5B;AASE,MAAA,CAAC,EAAE,CAAC,KAAK,SAAN,GAAkB,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAP,CAAlB,GAA8B,SATnC;AAUE,MAAA,CAAC,EAAA,CAVH;AAWE,MAAA,CAAC,EAAA;AAXH,KADK,EAcL,IAdK,CAAP;AAgBD,GA3Ba;AA4Ed;;AAEG;;;AACH,EAAA,4BAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,QAAM,IAAI,GAAG,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB,CAAb;;AACA,IAAA,IAAI,CAAC,KAAL,CAAW,MAAA,CAAA,WAAA,CAAY,iBAAZ,CAA8B,KAAK,UAAnC,EAA+C,KAAK,MAApD,CAAX;AACA,WAAO,IAAP;AACD,GAJD;AAMA;;AAEG;;;AACH,EAAA,4BAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,WAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,KAAK,QAAvB,EAAiC,GAAjC,CAAqC,KAAK,KAA1C,CAAP;AACD,GAFD;AAIA;;;;;;;AAOG;;;AACH,EAAA,4BAAA,CAAA,SAAA,CAAA,GAAA,GAAA,YAAA;AACE,WAAO,CACL,iBAAA,CAAA,kBAAA,CAAmB,KAAK,OAAxB,CADK,EAEL,iBAAA,CAAA,kBAAA,CAAmB,KAAK,KAAxB,CAFK,EAGL,iBAAA,CAAA,kBAAA,CAAmB,KAAK,QAAxB,CAHK,EAIL,iBAAA,CAAA,kBAAA,CAAmB,KAAK,QAAxB,CAJK,EAKL,KAAK,EAAL,KAAY,SAAZ,GAAwB,KAAK,EAAL,CAAQ,GAAhC,GAAsC,MAAM,CAAC,IAAP,CAAY,EAAZ,CALjC,EAML,iBAAA,CAAA,kBAAA,CAAmB,KAAK,KAAxB,CANK,EAOL,KAAK,IAPA,EAQL,KAAK,UARA,EASL,KAAK,CAAL,KAAW,SAAX,GAAuB,iBAAA,CAAA,kBAAA,CAAmB,KAAK,CAAxB,CAAvB,GAAoD,MAAM,CAAC,IAAP,CAAY,EAAZ,CAT/C,EAUL,KAAK,CAAL,KAAW,SAAX,GAAuB,iBAAA,CAAA,kBAAA,CAAmB,KAAK,CAAxB,CAAvB,GAAoD,MAAM,CAAC,IAAP,CAAY,EAAZ,CAV/C,EAWL,KAAK,CAAL,KAAW,SAAX,GAAuB,iBAAA,CAAA,kBAAA,CAAmB,KAAK,CAAxB,CAAvB,GAAoD,MAAM,CAAC,IAAP,CAAY,EAAZ,CAX/C,CAAP;AAaD,GAdD;AAgBA;;;;;;;;;AASG;;;AACH,EAAA,4BAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,QAAM,IAAI,GAAG,KAAK,GAAL,EAAb;AACA,WAAO,MAAM,CAAC,MAAP,CAAc,CAAC,uBAAD,EAA0B,iBAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,IAAX,CAA1B,CAAd,CAAP;AACD,GAHD;AAKA;;;;;;;;;;;;AAYG;;;AACH,EAAA,4BAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,WAAjB,EAAmC;AAAlB,QAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,WAAA,GAAA,IAAA;AAAkB;;AACjC,QAAM,IAAI,GAAG,KAAK,GAAL,GAAW,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAb;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,uBAAD,EAA0B,iBAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,IAAX,CAA1B,CAAd,CAAhB;;AACA,QAAI,WAAJ,EAAiB;AACf,aAAO,iBAAA,CAAA,SAAA,CAAU,OAAV,CAAP;AACD,KAFD,MAEO;AACL,aAAO,OAAP;AACD;AACF,GARD;AAUA;;;;;AAKG;;;AACI,EAAA,4BAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACE,QAAI,CAAC,KAAK,QAAL,EAAL,EAAsB;AACpB,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,WAAO,iBAAA,CAAA,SAAA,CAAU,KAAK,SAAL,EAAV,CAAP;AACD,GANM;AAQP;;AAEG;;;AACI,EAAA,4BAAA,CAAA,SAAA,CAAA,2BAAA,GAAP,YAAA;AACE,WAAO,KAAK,gBAAL,EAAP;AACD,GAFM;AAIP;;AAEG;;;AACI,EAAA,4BAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;;;AACE,QAAI,CAAC,KAAK,QAAL,EAAL,EAAsB;AACpB,YAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,QAAM,OAAO,GAAG,KAAK,2BAAL,EAAhB,CALF,CAOE;AACA;;AACA,QAAI,KAAK,MAAL,CAAY,WAAZ,CAAwB,WAAxB,MAAoC,CAAA,EAAA,GAAI,KAAK,CAAT,MAAU,IAAV,IAAU,EAAA,KAAA,KAAA,CAAV,GAAU,KAAA,CAAV,GAAU,EAAA,CAAE,EAAF,CAAK,OAAA,CAAA,OAAL,CAA9C,CAAJ,EAAiE;AAC/D,YAAM,IAAI,KAAJ,CACJ,8EADI,CAAN;AAGD;;AAEK,QAAA,EAAA,GAAoB,IAApB;AAAA,QAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,QAAW,CAAC,GAAA,EAAA,CAAA,CAAZ;AAAA,QAAc,CAAC,GAAA,EAAA,CAAA,CAAf;;AACN,QAAI;AACF,aAAO,iBAAA,CAAA,SAAA,CACL,OADK,EAEL,OAAQ,CAAC,IAAT,CAAc,EAAd,CAFK,EAEc;AACnB,MAAA,iBAAA,CAAA,kBAAA,CAAmB,CAAnB,CAHK,EAIL,iBAAA,CAAA,kBAAA,CAAmB,CAAnB,CAJK,CAAP;AAMD,KAPD,CAOE,OAAO,CAAP,EAAU;AACV,YAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN;AACD;AACF,GA1BM;;AA4BP,EAAA,4BAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,CAAlB,EAA6B,CAA7B,EAAwC,CAAxC,EAAiD;AAC/C,QAAM,IAAI,GAAG;AACX,MAAA,MAAM,EAAE,KAAK;AADF,KAAb;AAIA,WAAO,4BAA4B,CAAC,UAA7B,CACL;AACE,MAAA,OAAO,EAAE,KAAK,OADhB;AAEE,MAAA,KAAK,EAAE,KAAK,KAFd;AAGE,MAAA,QAAQ,EAAE,KAAK,QAHjB;AAIE,MAAA,QAAQ,EAAE,KAAK,QAJjB;AAKE,MAAA,EAAE,EAAE,KAAK,EALX;AAME,MAAA,KAAK,EAAE,KAAK,KANd;AAOE,MAAA,IAAI,EAAE,KAAK,IAPb;AAQE,MAAA,UAAU,EAAE,KAAK,UARnB;AASE,MAAA,CAAC,EAAE,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAC,GAAG,EAAX,CATL;AAUE,MAAA,CAAC,EAAE,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAP,CAVL;AAWE,MAAA,CAAC,EAAE,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAP;AAXL,KADK,EAcL,IAdK,CAAP;AAgBD,GArBD;AAuBA;;AAEG;;;AACH,EAAA,4BAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACE,QAAM,cAAc,GAAG,MAAA,CAAA,WAAA,CAAY,iBAAZ,CAA8B,KAAK,UAAnC,CAAvB;AAEA,WAAO;AACL,MAAA,OAAO,EAAE,iBAAA,CAAA,OAAA,CAAQ,KAAK,OAAb,CADJ;AAEL,MAAA,KAAK,EAAE,iBAAA,CAAA,OAAA,CAAQ,KAAK,KAAb,CAFF;AAGL,MAAA,QAAQ,EAAE,iBAAA,CAAA,OAAA,CAAQ,KAAK,QAAb,CAHL;AAIL,MAAA,QAAQ,EAAE,iBAAA,CAAA,OAAA,CAAQ,KAAK,QAAb,CAJL;AAKL,MAAA,EAAE,EAAE,KAAK,EAAL,KAAY,SAAZ,GAAwB,KAAK,EAAL,CAAQ,QAAR,EAAxB,GAA6C,SAL5C;AAML,MAAA,KAAK,EAAE,iBAAA,CAAA,OAAA,CAAQ,KAAK,KAAb,CANF;AAOL,MAAA,IAAI,EAAE,OAAO,KAAK,IAAL,CAAU,QAAV,CAAmB,KAAnB,CAPR;AAQL,MAAA,UAAU,EAAE,cARP;AASL,MAAA,CAAC,EAAE,KAAK,CAAL,KAAW,SAAX,GAAuB,iBAAA,CAAA,OAAA,CAAQ,KAAK,CAAb,CAAvB,GAAyC,SATvC;AAUL,MAAA,CAAC,EAAE,KAAK,CAAL,KAAW,SAAX,GAAuB,iBAAA,CAAA,OAAA,CAAQ,KAAK,CAAb,CAAvB,GAAyC,SAVvC;AAWL,MAAA,CAAC,EAAE,KAAK,CAAL,KAAW,SAAX,GAAuB,iBAAA,CAAA,OAAA,CAAQ,KAAK,CAAb,CAAvB,GAAyC;AAXvC,KAAP;AAaD,GAhBD;;AAiBF,SAAA,4BAAA;AAAC,CA7VD,CAA0D,iBAAA,CAAA,eAA1D,CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\r\nvar baseTransaction_1 = require(\"./baseTransaction\");\r\nvar types_1 = require(\"./types\");\r\nvar util_1 = require(\"./util\");\r\nvar TRANSACTION_TYPE = 1;\r\nvar TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\r\n/**\r\n * Typed transaction with optional access lists\r\n *\r\n * - TransactionType: 1\r\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\r\n */\r\nvar AccessListEIP2930Transaction = /** @class */ (function (_super) {\r\n    __extends(AccessListEIP2930Transaction, _super);\r\n    /**\r\n     * This constructor takes the values, validates them, assigns them and freezes the object.\r\n     *\r\n     * It is not recommended to use this constructor directly. Instead use\r\n     * the static factory methods to assist in creating a Transaction object from\r\n     * varying data types.\r\n     */\r\n    function AccessListEIP2930Transaction(txData, opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        var _a, _b;\r\n        var _this = _super.call(this, __assign(__assign({}, txData), { type: TRANSACTION_TYPE })) || this;\r\n        /**\r\n         * The default HF if the tx type is active on that HF\r\n         * or the first greater HF where the tx is active.\r\n         *\r\n         * @hidden\r\n         */\r\n        _this.DEFAULT_HARDFORK = 'berlin';\r\n        var chainId = txData.chainId, accessList = txData.accessList, gasPrice = txData.gasPrice;\r\n        _this.common = _this._getCommon(opts.common, chainId);\r\n        _this.chainId = _this.common.chainIdBN();\r\n        // EIP-2718 check is done in Common\r\n        if (!_this.common.isActivatedEIP(2930)) {\r\n            throw new Error('EIP-2930 not enabled on Common');\r\n        }\r\n        _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);\r\n        // Populate the access list fields\r\n        var accessListData = util_1.AccessLists.getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\r\n        _this.accessList = accessListData.accessList;\r\n        _this.AccessListJSON = accessListData.AccessListJSON;\r\n        // Verify the access list format.\r\n        util_1.AccessLists.verifyAccessList(_this.accessList);\r\n        _this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice === '' ? '0x' : gasPrice));\r\n        _this._validateCannotExceedMaxInteger({ gasPrice: _this.gasPrice });\r\n        if (_this.v && !_this.v.eqn(0) && !_this.v.eqn(1)) {\r\n            throw new Error('The y-parity of the transaction should either be 0 or 1');\r\n        }\r\n        if (_this.common.gteHardfork('homestead') && ((_a = _this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\r\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\r\n        }\r\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\r\n        if (freeze) {\r\n            Object.freeze(_this);\r\n        }\r\n        return _this;\r\n    }\r\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderR\", {\r\n        /**\r\n         * EIP-2930 alias for `r`\r\n         *\r\n         * @deprecated use `r` instead\r\n         */\r\n        get: function () {\r\n            return this.r;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"senderS\", {\r\n        /**\r\n         * EIP-2930 alias for `s`\r\n         *\r\n         * @deprecated use `s` instead\r\n         */\r\n        get: function () {\r\n            return this.s;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AccessListEIP2930Transaction.prototype, \"yParity\", {\r\n        /**\r\n         * EIP-2930 alias for `v`\r\n         *\r\n         * @deprecated use `v` instead\r\n         */\r\n        get: function () {\r\n            return this.v;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Instantiate a transaction from a data dictionary.\r\n     *\r\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n     * v, r, s }\r\n     *\r\n     * Notes:\r\n     * - `chainId` will be set automatically if not provided\r\n     * - All parameters are optional and have some basic default values\r\n     */\r\n    AccessListEIP2930Transaction.fromTxData = function (txData, opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        return new AccessListEIP2930Transaction(txData, opts);\r\n    };\r\n    /**\r\n     * Instantiate a transaction from the serialized tx.\r\n     *\r\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\r\n     */\r\n    AccessListEIP2930Transaction.fromSerializedTx = function (serialized, opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\r\n            throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \" + TRANSACTION_TYPE + \", received: \" + serialized\r\n                .slice(0, 1)\r\n                .toString('hex'));\r\n        }\r\n        var values = ethereumjs_util_1.rlp.decode(serialized.slice(1));\r\n        if (!Array.isArray(values)) {\r\n            throw new Error('Invalid serialized tx input: must be array');\r\n        }\r\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\r\n    };\r\n    /**\r\n     * Instantiate a transaction from the serialized tx.\r\n     * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\r\n     *\r\n     * Note: This means that the Buffer should start with 0x01.\r\n     *\r\n     * @deprecated this constructor alias is deprecated and will be removed\r\n     * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\r\n     */\r\n    AccessListEIP2930Transaction.fromRlpSerializedTx = function (serialized, opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts);\r\n    };\r\n    /**\r\n     * Create a transaction from a values array.\r\n     *\r\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\r\n     */\r\n    AccessListEIP2930Transaction.fromValuesArray = function (values, opts) {\r\n        if (opts === void 0) { opts = {}; }\r\n        if (values.length !== 8 && values.length !== 11) {\r\n            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\r\n        }\r\n        var _a = __read(values, 11), chainId = _a[0], nonce = _a[1], gasPrice = _a[2], gasLimit = _a[3], to = _a[4], value = _a[5], data = _a[6], accessList = _a[7], v = _a[8], r = _a[9], s = _a[10];\r\n        var emptyAccessList = [];\r\n        return new AccessListEIP2930Transaction({\r\n            chainId: new ethereumjs_util_1.BN(chainId),\r\n            nonce: nonce,\r\n            gasPrice: gasPrice,\r\n            gasLimit: gasLimit,\r\n            to: to,\r\n            value: value,\r\n            data: data,\r\n            accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\r\n            v: v !== undefined ? new ethereumjs_util_1.BN(v) : undefined,\r\n            r: r,\r\n            s: s,\r\n        }, opts);\r\n    };\r\n    /**\r\n     * The amount of gas paid for the data in this tx\r\n     */\r\n    AccessListEIP2930Transaction.prototype.getDataFee = function () {\r\n        var cost = _super.prototype.getDataFee.call(this);\r\n        cost.iaddn(util_1.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\r\n        return cost;\r\n    };\r\n    /**\r\n     * The up front amount that an account must have for this transaction to be valid\r\n     */\r\n    AccessListEIP2930Transaction.prototype.getUpfrontCost = function () {\r\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\r\n    };\r\n    /**\r\n     * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\r\n     *\r\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\r\n     *\r\n     * Use {@link AccessListEIP2930Transaction.serialize} to add to block data for {@link Block.fromValuesArray}.\r\n     */\r\n    AccessListEIP2930Transaction.prototype.raw = function () {\r\n        return [\r\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.chainId),\r\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.nonce),\r\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasPrice),\r\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.gasLimit),\r\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\r\n            ethereumjs_util_1.bnToUnpaddedBuffer(this.value),\r\n            this.data,\r\n            this.accessList,\r\n            this.v !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.v) : Buffer.from([]),\r\n            this.r !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.r) : Buffer.from([]),\r\n            this.s !== undefined ? ethereumjs_util_1.bnToUnpaddedBuffer(this.s) : Buffer.from([]),\r\n        ];\r\n    };\r\n    /**\r\n     * Returns the serialized encoding of the EIP-2930 transaction.\r\n     *\r\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\r\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\r\n     *\r\n     * Note that in contrast to the legacy tx serialization format this is not\r\n     * valid RLP any more due to the raw tx type preceeding and concatenated to\r\n     * the RLP encoding of the values.\r\n     */\r\n    AccessListEIP2930Transaction.prototype.serialize = function () {\r\n        var base = this.raw();\r\n        return Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\r\n    };\r\n    /**\r\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\r\n     * to sign the transaction (e.g. for sending to a hardware wallet).\r\n     *\r\n     * Note: in contrast to the legacy tx the raw message format is already\r\n     * serialized and doesn't need to be RLP encoded any more.\r\n     *\r\n     * ```javascript\r\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\r\n     * ```\r\n     *\r\n     * @param hashMessage - Return hashed message if set to true (default: true)\r\n     */\r\n    AccessListEIP2930Transaction.prototype.getMessageToSign = function (hashMessage) {\r\n        if (hashMessage === void 0) { hashMessage = true; }\r\n        var base = this.raw().slice(0, 8);\r\n        var message = Buffer.concat([TRANSACTION_TYPE_BUFFER, ethereumjs_util_1.rlp.encode(base)]);\r\n        if (hashMessage) {\r\n            return ethereumjs_util_1.keccak256(message);\r\n        }\r\n        else {\r\n            return message;\r\n        }\r\n    };\r\n    /**\r\n     * Computes a sha3-256 hash of the serialized tx.\r\n     *\r\n     * This method can only be used for signed txs (it throws otherwise).\r\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\r\n     */\r\n    AccessListEIP2930Transaction.prototype.hash = function () {\r\n        if (!this.isSigned()) {\r\n            throw new Error('Cannot call hash method if transaction is not signed');\r\n        }\r\n        return ethereumjs_util_1.keccak256(this.serialize());\r\n    };\r\n    /**\r\n     * Computes a sha3-256 hash which can be used to verify the signature\r\n     */\r\n    AccessListEIP2930Transaction.prototype.getMessageToVerifySignature = function () {\r\n        return this.getMessageToSign();\r\n    };\r\n    /**\r\n     * Returns the public key of the sender\r\n     */\r\n    AccessListEIP2930Transaction.prototype.getSenderPublicKey = function () {\r\n        var _a;\r\n        if (!this.isSigned()) {\r\n            throw new Error('Cannot call this method if transaction is not signed');\r\n        }\r\n        var msgHash = this.getMessageToVerifySignature();\r\n        // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\r\n        // Reasoning: https://ethereum.stackexchange.com/a/55728\r\n        if (this.common.gteHardfork('homestead') && ((_a = this.s) === null || _a === void 0 ? void 0 : _a.gt(types_1.N_DIV_2))) {\r\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\r\n        }\r\n        var _b = this, yParity = _b.yParity, r = _b.r, s = _b.s;\r\n        try {\r\n            return ethereumjs_util_1.ecrecover(msgHash, yParity.addn(27), // Recover the 27 which was stripped from ecsign\r\n            ethereumjs_util_1.bnToUnpaddedBuffer(r), ethereumjs_util_1.bnToUnpaddedBuffer(s));\r\n        }\r\n        catch (e) {\r\n            throw new Error('Invalid Signature');\r\n        }\r\n    };\r\n    AccessListEIP2930Transaction.prototype._processSignature = function (v, r, s) {\r\n        var opts = {\r\n            common: this.common,\r\n        };\r\n        return AccessListEIP2930Transaction.fromTxData({\r\n            chainId: this.chainId,\r\n            nonce: this.nonce,\r\n            gasPrice: this.gasPrice,\r\n            gasLimit: this.gasLimit,\r\n            to: this.to,\r\n            value: this.value,\r\n            data: this.data,\r\n            accessList: this.accessList,\r\n            v: new ethereumjs_util_1.BN(v - 27),\r\n            r: new ethereumjs_util_1.BN(r),\r\n            s: new ethereumjs_util_1.BN(s),\r\n        }, opts);\r\n    };\r\n    /**\r\n     * Returns an object with the JSON representation of the transaction\r\n     */\r\n    AccessListEIP2930Transaction.prototype.toJSON = function () {\r\n        var accessListJSON = util_1.AccessLists.getAccessListJSON(this.accessList);\r\n        return {\r\n            chainId: ethereumjs_util_1.bnToHex(this.chainId),\r\n            nonce: ethereumjs_util_1.bnToHex(this.nonce),\r\n            gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\r\n            gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\r\n            to: this.to !== undefined ? this.to.toString() : undefined,\r\n            value: ethereumjs_util_1.bnToHex(this.value),\r\n            data: '0x' + this.data.toString('hex'),\r\n            accessList: accessListJSON,\r\n            v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\r\n            r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\r\n            s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined,\r\n        };\r\n    };\r\n    return AccessListEIP2930Transaction;\r\n}(baseTransaction_1.BaseTransaction));\r\nexports.default = AccessListEIP2930Transaction;\r\n//# sourceMappingURL=eip2930Transaction.js.map"]},"metadata":{},"sourceType":"script"}