{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\n\nvar ethjs_util_1 = require(\"ethjs-util\");\n/**\r\n * Throws if a string is not hex prefixed\r\n * @param {string} input string to check hex prefix of\r\n */\n\n\nexports.assertIsHexString = function (input) {\n  if (!ethjs_util_1.isHexString(input)) {\n    var msg = \"This method only supports 0x-prefixed hex strings but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n/**\r\n * Throws if input is not a buffer\r\n * @param {Buffer} input value to check\r\n */\n\n\nexports.assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    var msg = \"This method only supports Buffer but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n/**\r\n * Throws if input is not an array\r\n * @param {number[]} input value to check\r\n */\n\n\nexports.assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    var msg = \"This method only supports number arrays but input was: \" + input;\n    throw new Error(msg);\n  }\n};\n/**\r\n * Throws if input is not a string\r\n * @param {string} input value to check\r\n */\n\n\nexports.assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    var msg = \"This method only supports strings but input was: \" + input;\n    throw new Error(msg);\n  }\n};","map":{"version":3,"sources":["../src/helpers.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;;AAGG;;;AACU,OAAA,CAAA,iBAAA,GAAoB,UAAU,KAAV,EAAuB;AACtD,MAAI,CAAC,YAAA,CAAA,WAAA,CAAY,KAAZ,CAAL,EAAyB;AACvB,QAAM,GAAG,GAAG,sEAAoE,KAAhF;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALY;AAOb;;;AAGG;;;AACU,OAAA,CAAA,cAAA,GAAiB,UAAU,KAAV,EAAuB;AACnD,MAAI,CAAC,MAAM,CAAC,QAAP,CAAgB,KAAhB,CAAL,EAA6B;AAC3B,QAAM,GAAG,GAAG,qDAAmD,KAA/D;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALY;AAOb;;;AAGG;;;AACU,OAAA,CAAA,aAAA,GAAgB,UAAU,KAAV,EAAyB;AACpD,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AACzB,QAAM,GAAG,GAAG,4DAA0D,KAAtE;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALY;AAOb;;;AAGG;;;AACU,OAAA,CAAA,cAAA,GAAiB,UAAU,KAAV,EAAuB;AACnD,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,QAAM,GAAG,GAAG,sDAAoD,KAAhE;AACA,UAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACF,CALY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\r\nvar ethjs_util_1 = require(\"ethjs-util\");\r\n/**\r\n * Throws if a string is not hex prefixed\r\n * @param {string} input string to check hex prefix of\r\n */\r\nexports.assertIsHexString = function (input) {\r\n    if (!ethjs_util_1.isHexString(input)) {\r\n        var msg = \"This method only supports 0x-prefixed hex strings but input was: \" + input;\r\n        throw new Error(msg);\r\n    }\r\n};\r\n/**\r\n * Throws if input is not a buffer\r\n * @param {Buffer} input value to check\r\n */\r\nexports.assertIsBuffer = function (input) {\r\n    if (!Buffer.isBuffer(input)) {\r\n        var msg = \"This method only supports Buffer but input was: \" + input;\r\n        throw new Error(msg);\r\n    }\r\n};\r\n/**\r\n * Throws if input is not an array\r\n * @param {number[]} input value to check\r\n */\r\nexports.assertIsArray = function (input) {\r\n    if (!Array.isArray(input)) {\r\n        var msg = \"This method only supports number arrays but input was: \" + input;\r\n        throw new Error(msg);\r\n    }\r\n};\r\n/**\r\n * Throws if input is not a string\r\n * @param {string} input value to check\r\n */\r\nexports.assertIsString = function (input) {\r\n    if (typeof input !== 'string') {\r\n        var msg = \"This method only supports strings but input was: \" + input;\r\n        throw new Error(msg);\r\n    }\r\n};\r\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"script"}