{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\n\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nvar createHash = require('create-hash');\n\nvar rlp = __importStar(require(\"rlp\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nvar helpers_1 = require(\"./helpers\");\n/**\r\n * Creates Keccak hash of a Buffer input\r\n * @param a The input data (Buffer)\r\n * @param bits (number = 256) The Keccak width\r\n */\n\n\nexports.keccak = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsBuffer(a);\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak_1.keccak224(a);\n      }\n\n    case 256:\n      {\n        return keccak_1.keccak256(a);\n      }\n\n    case 384:\n      {\n        return keccak_1.keccak384(a);\n      }\n\n    case 512:\n      {\n        return keccak_1.keccak512(a);\n      }\n\n    default:\n      {\n        throw new Error(\"Invald algorithm: keccak\" + bits);\n      }\n  }\n};\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer)\r\n */\n\n\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\r\n * Creates Keccak hash of a utf-8 string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\n\n\nexports.keccakFromString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsString(a);\n  var buf = Buffer.from(a, 'utf8');\n  return exports.keccak(buf, bits);\n};\n/**\r\n * Creates Keccak hash of an 0x-prefixed string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\n\n\nexports.keccakFromHexString = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsHexString(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\r\n * Creates Keccak hash of a number array input\r\n * @param a The input data (number[])\r\n * @param bits (number = 256) The Keccak width\r\n */\n\n\nexports.keccakFromArray = function (a, bits) {\n  if (bits === void 0) {\n    bits = 256;\n  }\n\n  helpers_1.assertIsArray(a);\n  return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\r\n * Creates SHA256 hash of an input.\r\n * @param  a The input data (Buffer|Array|String)\r\n */\n\n\nvar _sha256 = function (a) {\n  a = bytes_1.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\r\n * Creates SHA256 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n */\n\n\nexports.sha256 = function (a) {\n  helpers_1.assertIsBuffer(a);\n  return _sha256(a);\n};\n/**\r\n * Creates SHA256 hash of a string input.\r\n * @param a The input data (string)\r\n */\n\n\nexports.sha256FromString = function (a) {\n  helpers_1.assertIsString(a);\n  return _sha256(a);\n};\n/**\r\n * Creates SHA256 hash of a number[] input.\r\n * @param a The input data (number[])\r\n */\n\n\nexports.sha256FromArray = function (a) {\n  helpers_1.assertIsArray(a);\n  return _sha256(a);\n};\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\n\nvar _ripemd160 = function (a, padded) {\n  a = bytes_1.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return bytes_1.setLengthLeft(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\r\n * Creates RIPEMD160 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  helpers_1.assertIsBuffer(a);\n  return _ripemd160(a, padded);\n};\n/**\r\n * Creates RIPEMD160 hash of a string input.\r\n * @param a The input data (String)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\n\nexports.ripemd160FromString = function (a, padded) {\n  helpers_1.assertIsString(a);\n  return _ripemd160(a, padded);\n};\n/**\r\n * Creates RIPEMD160 hash of a number[] input.\r\n * @param a The input data (number[])\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\n\n\nexports.ripemd160FromArray = function (a, padded) {\n  helpers_1.assertIsArray(a);\n  return _ripemd160(a, padded);\n};\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\n\n\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};","map":{"version":3,"sources":["../src/hash.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\r\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\r\nvar createHash = require('create-hash');\r\nvar rlp = __importStar(require(\"rlp\"));\r\nvar bytes_1 = require(\"./bytes\");\r\nvar helpers_1 = require(\"./helpers\");\r\n/**\r\n * Creates Keccak hash of a Buffer input\r\n * @param a The input data (Buffer)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nexports.keccak = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    helpers_1.assertIsBuffer(a);\r\n    switch (bits) {\r\n        case 224: {\r\n            return keccak_1.keccak224(a);\r\n        }\r\n        case 256: {\r\n            return keccak_1.keccak256(a);\r\n        }\r\n        case 384: {\r\n            return keccak_1.keccak384(a);\r\n        }\r\n        case 512: {\r\n            return keccak_1.keccak512(a);\r\n        }\r\n        default: {\r\n            throw new Error(\"Invald algorithm: keccak\" + bits);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\r\n * @param a The input data (Buffer)\r\n */\r\nexports.keccak256 = function (a) {\r\n    return exports.keccak(a);\r\n};\r\n/**\r\n * Creates Keccak hash of a utf-8 string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nexports.keccakFromString = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    helpers_1.assertIsString(a);\r\n    var buf = Buffer.from(a, 'utf8');\r\n    return exports.keccak(buf, bits);\r\n};\r\n/**\r\n * Creates Keccak hash of an 0x-prefixed string input\r\n * @param a The input data (String)\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nexports.keccakFromHexString = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    helpers_1.assertIsHexString(a);\r\n    return exports.keccak(bytes_1.toBuffer(a), bits);\r\n};\r\n/**\r\n * Creates Keccak hash of a number array input\r\n * @param a The input data (number[])\r\n * @param bits (number = 256) The Keccak width\r\n */\r\nexports.keccakFromArray = function (a, bits) {\r\n    if (bits === void 0) { bits = 256; }\r\n    helpers_1.assertIsArray(a);\r\n    return exports.keccak(bytes_1.toBuffer(a), bits);\r\n};\r\n/**\r\n * Creates SHA256 hash of an input.\r\n * @param  a The input data (Buffer|Array|String)\r\n */\r\nvar _sha256 = function (a) {\r\n    a = bytes_1.toBuffer(a);\r\n    return createHash('sha256').update(a).digest();\r\n};\r\n/**\r\n * Creates SHA256 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n */\r\nexports.sha256 = function (a) {\r\n    helpers_1.assertIsBuffer(a);\r\n    return _sha256(a);\r\n};\r\n/**\r\n * Creates SHA256 hash of a string input.\r\n * @param a The input data (string)\r\n */\r\nexports.sha256FromString = function (a) {\r\n    helpers_1.assertIsString(a);\r\n    return _sha256(a);\r\n};\r\n/**\r\n * Creates SHA256 hash of a number[] input.\r\n * @param a The input data (number[])\r\n */\r\nexports.sha256FromArray = function (a) {\r\n    helpers_1.assertIsArray(a);\r\n    return _sha256(a);\r\n};\r\n/**\r\n * Creates RIPEMD160 hash of the input.\r\n * @param a The input data (Buffer|Array|String|Number)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nvar _ripemd160 = function (a, padded) {\r\n    a = bytes_1.toBuffer(a);\r\n    var hash = createHash('rmd160').update(a).digest();\r\n    if (padded === true) {\r\n        return bytes_1.setLengthLeft(hash, 32);\r\n    }\r\n    else {\r\n        return hash;\r\n    }\r\n};\r\n/**\r\n * Creates RIPEMD160 hash of a Buffer input.\r\n * @param a The input data (Buffer)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nexports.ripemd160 = function (a, padded) {\r\n    helpers_1.assertIsBuffer(a);\r\n    return _ripemd160(a, padded);\r\n};\r\n/**\r\n * Creates RIPEMD160 hash of a string input.\r\n * @param a The input data (String)\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nexports.ripemd160FromString = function (a, padded) {\r\n    helpers_1.assertIsString(a);\r\n    return _ripemd160(a, padded);\r\n};\r\n/**\r\n * Creates RIPEMD160 hash of a number[] input.\r\n * @param a The input data (number[])\r\n * @param padded Whether it should be padded to 256 bits or not\r\n */\r\nexports.ripemd160FromArray = function (a, padded) {\r\n    helpers_1.assertIsArray(a);\r\n    return _ripemd160(a, padded);\r\n};\r\n/**\r\n * Creates SHA-3 hash of the RLP encoded version of the input.\r\n * @param a The input data\r\n */\r\nexports.rlphash = function (a) {\r\n    return exports.keccak(rlp.encode(a));\r\n};\r\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}